// namespace Amusoft.PCR.Int.Identity;

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#region

using System.CodeDom.Compiler;
using System.Globalization;
using System.Net.Http.Headers;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

#endregion

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace Amusoft.PCR.Int.Identity;

[GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class IdentityClient
{
	private string _baseUrl;
	private HttpClient _httpClient;
	private static Lazy<JsonSerializerOptions> _settings = new(CreateSerializerSettings, true);

	public IdentityClient(HttpClient httpClient, string baseUrl)
	{
		_baseUrl = baseUrl;
		_httpClient = httpClient;
	}

	private static JsonSerializerOptions CreateSerializerSettings()
	{
		var settings = new JsonSerializerOptions();
		UpdateJsonSerializerSettings(settings);
		return settings;
	}

	public string BaseUrl
	{
		get { return _baseUrl; }
		set
		{
			_baseUrl = value;
			if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
				_baseUrl += '/';
		}
	}

	protected JsonSerializerOptions JsonSerializerSettings
	{
		get { return _settings.Value; }
	}

	static partial void UpdateJsonSerializerSettings(JsonSerializerOptions settings);

	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual Task PostRegisterAsync(RegisterRequest? registration)
	{
		return PostRegisterAsync(registration, CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async Task PostRegisterAsync(RegisterRequest? registration, CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new HttpRequestMessage())
			{
				var json_ = JsonSerializer.SerializeToUtf8Bytes(registration, _settings.Value);
				var content_ = new ByteArrayContent(json_);
				content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
				request_.Content = content_;
				request_.Method = new HttpMethod("POST");

				var urlBuilder_ = new StringBuilder();
				if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
				urlBuilder_.Append("register");

				await PrepareRequestAsync(client_, request_, urlBuilder_, cancellationToken).ConfigureAwait(false);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

				await PrepareRequestAsync(client_, request_, url_, cancellationToken).ConfigureAwait(false);

				var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					await ProcessResponseAsync(client_, response_, cancellationToken).ConfigureAwait(false);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						return;
					}
					else if (status_ == 400)
					{
						var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}

						throw new ApiException<HttpValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual Task<AccessTokenResponse> PostLoginAsync(bool? useCookies, bool? useSessionCookies, LoginRequest? login)
	{
		return PostLoginAsync(useCookies, useSessionCookies, login, CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async Task<AccessTokenResponse> PostLoginAsync(bool? useCookies, bool? useSessionCookies, LoginRequest? login, CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new HttpRequestMessage())
			{
				var json_ = JsonSerializer.SerializeToUtf8Bytes(login, _settings.Value);
				var content_ = new ByteArrayContent(json_);
				content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
				request_.Content = content_;
				request_.Method = new HttpMethod("POST");
				request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

				var urlBuilder_ = new StringBuilder();
				if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
				urlBuilder_.Append("login");
				urlBuilder_.Append('?');
				if (useCookies != null)
				{
					urlBuilder_.Append(Uri.EscapeDataString("useCookies") + "=").Append(Uri.EscapeDataString(ConvertToString(useCookies, CultureInfo.InvariantCulture))).Append("&");
				}

				if (useSessionCookies != null)
				{
					urlBuilder_.Append(Uri.EscapeDataString("useSessionCookies") + "=").Append(Uri.EscapeDataString(ConvertToString(useSessionCookies, CultureInfo.InvariantCulture))).Append("&");
				}

				urlBuilder_.Length--;

				await PrepareRequestAsync(client_, request_, urlBuilder_, cancellationToken).ConfigureAwait(false);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

				await PrepareRequestAsync(client_, request_, url_, cancellationToken).ConfigureAwait(false);

				var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					await ProcessResponseAsync(client_, response_, cancellationToken).ConfigureAwait(false);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<AccessTokenResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}

						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual Task<AccessTokenResponse> PostRefreshAsync(RefreshRequest? refreshRequest)
	{
		return PostRefreshAsync(refreshRequest, CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async Task<AccessTokenResponse> PostRefreshAsync(RefreshRequest? refreshRequest, CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new HttpRequestMessage())
			{
				var json_ = JsonSerializer.SerializeToUtf8Bytes(refreshRequest, _settings.Value);
				var content_ = new ByteArrayContent(json_);
				content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
				request_.Content = content_;
				request_.Method = new HttpMethod("POST");
				request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

				var urlBuilder_ = new StringBuilder();
				if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
				urlBuilder_.Append("refresh");

				await PrepareRequestAsync(client_, request_, urlBuilder_, cancellationToken).ConfigureAwait(false);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

				await PrepareRequestAsync(client_, request_, url_, cancellationToken).ConfigureAwait(false);

				var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					await ProcessResponseAsync(client_, response_, cancellationToken).ConfigureAwait(false);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<AccessTokenResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}

						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual Task GetConfirmEmailAsync(string? userId, string? code, string? changedEmail)
	{
		return GetConfirmEmailAsync(userId, code, changedEmail, CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async Task GetConfirmEmailAsync(string? userId, string? code, string? changedEmail, CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new HttpRequestMessage())
			{
				request_.Method = new HttpMethod("GET");

				var urlBuilder_ = new StringBuilder();
				if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
				urlBuilder_.Append("confirmEmail");
				urlBuilder_.Append('?');
				if (userId != null)
				{
					urlBuilder_.Append(Uri.EscapeDataString("userId") + "=").Append(Uri.EscapeDataString(ConvertToString(userId, CultureInfo.InvariantCulture))).Append("&");
				}

				if (code != null)
				{
					urlBuilder_.Append(Uri.EscapeDataString("code") + "=").Append(Uri.EscapeDataString(ConvertToString(code, CultureInfo.InvariantCulture))).Append("&");
				}

				if (changedEmail != null)
				{
					urlBuilder_.Append(Uri.EscapeDataString("changedEmail") + "=").Append(Uri.EscapeDataString(ConvertToString(changedEmail, CultureInfo.InvariantCulture))).Append("&");
				}

				urlBuilder_.Length--;

				await PrepareRequestAsync(client_, request_, urlBuilder_, cancellationToken).ConfigureAwait(false);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

				await PrepareRequestAsync(client_, request_, url_, cancellationToken).ConfigureAwait(false);

				var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					await ProcessResponseAsync(client_, response_, cancellationToken).ConfigureAwait(false);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						return;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual Task PostResendConfirmationEmailAsync(ResendConfirmationEmailRequest? resendRequest)
	{
		return PostResendConfirmationEmailAsync(resendRequest, CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async Task PostResendConfirmationEmailAsync(ResendConfirmationEmailRequest? resendRequest, CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new HttpRequestMessage())
			{
				var json_ = JsonSerializer.SerializeToUtf8Bytes(resendRequest, _settings.Value);
				var content_ = new ByteArrayContent(json_);
				content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
				request_.Content = content_;
				request_.Method = new HttpMethod("POST");

				var urlBuilder_ = new StringBuilder();
				if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
				urlBuilder_.Append("resendConfirmationEmail");

				await PrepareRequestAsync(client_, request_, urlBuilder_, cancellationToken).ConfigureAwait(false);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

				await PrepareRequestAsync(client_, request_, url_, cancellationToken).ConfigureAwait(false);

				var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					await ProcessResponseAsync(client_, response_, cancellationToken).ConfigureAwait(false);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						return;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual Task PostForgotPasswordAsync(ForgotPasswordRequest? resetRequest)
	{
		return PostForgotPasswordAsync(resetRequest, CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async Task PostForgotPasswordAsync(ForgotPasswordRequest? resetRequest, CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new HttpRequestMessage())
			{
				var json_ = JsonSerializer.SerializeToUtf8Bytes(resetRequest, _settings.Value);
				var content_ = new ByteArrayContent(json_);
				content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
				request_.Content = content_;
				request_.Method = new HttpMethod("POST");

				var urlBuilder_ = new StringBuilder();
				if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
				urlBuilder_.Append("forgotPassword");

				await PrepareRequestAsync(client_, request_, urlBuilder_, cancellationToken).ConfigureAwait(false);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

				await PrepareRequestAsync(client_, request_, url_, cancellationToken).ConfigureAwait(false);

				var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					await ProcessResponseAsync(client_, response_, cancellationToken).ConfigureAwait(false);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						return;
					}
					else if (status_ == 400)
					{
						var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}

						throw new ApiException<HttpValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual Task PostResetPasswordAsync(ResetPasswordRequest? resetRequest)
	{
		return PostResetPasswordAsync(resetRequest, CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async Task PostResetPasswordAsync(ResetPasswordRequest? resetRequest, CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new HttpRequestMessage())
			{
				var json_ = JsonSerializer.SerializeToUtf8Bytes(resetRequest, _settings.Value);
				var content_ = new ByteArrayContent(json_);
				content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
				request_.Content = content_;
				request_.Method = new HttpMethod("POST");

				var urlBuilder_ = new StringBuilder();
				if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
				urlBuilder_.Append("resetPassword");

				await PrepareRequestAsync(client_, request_, urlBuilder_, cancellationToken).ConfigureAwait(false);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

				await PrepareRequestAsync(client_, request_, url_, cancellationToken).ConfigureAwait(false);

				var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					await ProcessResponseAsync(client_, response_, cancellationToken).ConfigureAwait(false);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						return;
					}
					else if (status_ == 400)
					{
						var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}

						throw new ApiException<HttpValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual Task<TwoFactorResponse> PostManage2faAsync(TwoFactorRequest? tfaRequest)
	{
		return PostManage2faAsync(tfaRequest, CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async Task<TwoFactorResponse> PostManage2faAsync(TwoFactorRequest? tfaRequest, CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new HttpRequestMessage())
			{
				var json_ = JsonSerializer.SerializeToUtf8Bytes(tfaRequest, _settings.Value);
				var content_ = new ByteArrayContent(json_);
				content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
				request_.Content = content_;
				request_.Method = new HttpMethod("POST");
				request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

				var urlBuilder_ = new StringBuilder();
				if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
				urlBuilder_.Append("manage");
				urlBuilder_.Append('/');
				urlBuilder_.Append("2fa");

				await PrepareRequestAsync(client_, request_, urlBuilder_, cancellationToken).ConfigureAwait(false);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

				await PrepareRequestAsync(client_, request_, url_, cancellationToken).ConfigureAwait(false);

				var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					await ProcessResponseAsync(client_, response_, cancellationToken).ConfigureAwait(false);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<TwoFactorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}

						return objectResponse_.Object;
					}
					else if (status_ == 400)
					{
						var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}

						throw new ApiException<HttpValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
					}
					else if (status_ == 404)
					{
						var responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual Task<InfoResponse> GetManageInfoAsync()
	{
		return GetManageInfoAsync(CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async Task<InfoResponse> GetManageInfoAsync(CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new HttpRequestMessage())
			{
				request_.Method = new HttpMethod("GET");
				request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

				var urlBuilder_ = new StringBuilder();
				if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
				urlBuilder_.Append("manage");
				urlBuilder_.Append('/');
				urlBuilder_.Append("info");

				await PrepareRequestAsync(client_, request_, urlBuilder_, cancellationToken).ConfigureAwait(false);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

				await PrepareRequestAsync(client_, request_, url_, cancellationToken).ConfigureAwait(false);

				var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					await ProcessResponseAsync(client_, response_, cancellationToken).ConfigureAwait(false);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<InfoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}

						return objectResponse_.Object;
					}
					else if (status_ == 400)
					{
						var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}

						throw new ApiException<HttpValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
					}
					else if (status_ == 404)
					{
						var responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual Task<InfoResponse> PostManageInfoAsync(InfoRequest? infoRequest)
	{
		return PostManageInfoAsync(infoRequest, CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async Task<InfoResponse> PostManageInfoAsync(InfoRequest? infoRequest, CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new HttpRequestMessage())
			{
				var json_ = JsonSerializer.SerializeToUtf8Bytes(infoRequest, _settings.Value);
				var content_ = new ByteArrayContent(json_);
				content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
				request_.Content = content_;
				request_.Method = new HttpMethod("POST");
				request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

				var urlBuilder_ = new StringBuilder();
				if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
				urlBuilder_.Append("manage");
				urlBuilder_.Append('/');
				urlBuilder_.Append("info");

				await PrepareRequestAsync(client_, request_, urlBuilder_, cancellationToken).ConfigureAwait(false);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

				await PrepareRequestAsync(client_, request_, url_, cancellationToken).ConfigureAwait(false);

				var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					await ProcessResponseAsync(client_, response_, cancellationToken).ConfigureAwait(false);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<InfoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}

						return objectResponse_.Object;
					}
					else if (status_ == 400)
					{
						var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}

						throw new ApiException<HttpValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
					}
					else if (status_ == 404)
					{
						var responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual Task GetQrcodeAsync(string url)
	{
		return GetQrcodeAsync(url, CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async Task GetQrcodeAsync(string url, CancellationToken cancellationToken)
	{
		if (url == null)
			throw new ArgumentNullException("url");

		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new HttpRequestMessage())
			{
				request_.Method = new HttpMethod("GET");

				var urlBuilder_ = new StringBuilder();
				if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
				urlBuilder_.Append("qrcode");
				urlBuilder_.Append('/');
				urlBuilder_.Append(Uri.EscapeDataString(ConvertToString(url, CultureInfo.InvariantCulture)));

				await PrepareRequestAsync(client_, request_, urlBuilder_, cancellationToken).ConfigureAwait(false);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

				await PrepareRequestAsync(client_, request_, url_, cancellationToken).ConfigureAwait(false);

				var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					await ProcessResponseAsync(client_, response_, cancellationToken).ConfigureAwait(false);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						return;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual Task<string> GetHelloAsync()
	{
		return GetHelloAsync(CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async Task<string> GetHelloAsync(CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new HttpRequestMessage())
			{
				request_.Method = new HttpMethod("GET");
				request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

				var urlBuilder_ = new StringBuilder();
				if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
				urlBuilder_.Append("hello");

				await PrepareRequestAsync(client_, request_, urlBuilder_, cancellationToken).ConfigureAwait(false);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

				await PrepareRequestAsync(client_, request_, url_, cancellationToken).ConfigureAwait(false);

				var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					await ProcessResponseAsync(client_, response_, cancellationToken).ConfigureAwait(false);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}

						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual Task<string> GetEnvAsync()
	{
		return GetEnvAsync(CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async Task<string> GetEnvAsync(CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new HttpRequestMessage())
			{
				request_.Method = new HttpMethod("GET");
				request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

				var urlBuilder_ = new StringBuilder();
				if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
				urlBuilder_.Append("env");

				await PrepareRequestAsync(client_, request_, urlBuilder_, cancellationToken).ConfigureAwait(false);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

				await PrepareRequestAsync(client_, request_, url_, cancellationToken).ConfigureAwait(false);

				var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					await ProcessResponseAsync(client_, response_, cancellationToken).ConfigureAwait(false);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}

						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual Task<string> GetAsync()
	{
		return GetAsync(CancellationToken.None);
	}

	/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
	/// <exception cref="ApiException">A server side error occurred.</exception>
	public virtual async Task<string> GetAsync(CancellationToken cancellationToken)
	{
		var client_ = _httpClient;
		var disposeClient_ = false;
		try
		{
			using (var request_ = new HttpRequestMessage())
			{
				request_.Method = new HttpMethod("GET");
				request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

				var urlBuilder_ = new StringBuilder();
				if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);

				await PrepareRequestAsync(client_, request_, urlBuilder_, cancellationToken).ConfigureAwait(false);

				var url_ = urlBuilder_.ToString();
				request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

				await PrepareRequestAsync(client_, request_, url_, cancellationToken).ConfigureAwait(false);

				var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
				var disposeResponse_ = true;
				try
				{
					var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
					if (response_.Content != null && response_.Content.Headers != null)
					{
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;
					}

					await ProcessResponseAsync(client_, response_, cancellationToken).ConfigureAwait(false);

					var status_ = (int)response_.StatusCode;
					if (status_ == 200)
					{
						var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
						if (objectResponse_.Object == null)
						{
							throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
						}

						return objectResponse_.Object;
					}
					else
					{
						var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
						throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
					}
				}
				finally
				{
					if (disposeResponse_)
						response_.Dispose();
				}
			}
		}
		finally
		{
			if (disposeClient_)
				client_.Dispose();
		}
	}

	protected struct ObjectResponseResult<T>
	{
		public ObjectResponseResult(T responseObject, string responseText)
		{
			this.Object = responseObject;
			this.Text = responseText;
		}

		public T Object { get; }

		public string Text { get; }
	}

	public bool ReadResponseAsString { get; set; }

	protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
	{
		if (response == null || response.Content == null)
		{
			return new ObjectResponseResult<T>(default(T)!, string.Empty);
		}

		if (ReadResponseAsString)
		{
			var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
			try
			{
				var typedBody = JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
				return new ObjectResponseResult<T>(typedBody!, responseText);
			}
			catch (JsonException exception)
			{
				var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
				throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
			}
		}
		else
		{
			try
			{
				using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
				{
					var typedBody = await JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
					return new ObjectResponseResult<T>(typedBody!, string.Empty);
				}
			}
			catch (JsonException exception)
			{
				var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
				throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
			}
		}
	}

	private string ConvertToString(object? value, CultureInfo cultureInfo)
	{
		if (value == null)
		{
			return "";
		}

		if (value is Enum)
		{
			var name = Enum.GetName(value.GetType(), value);
			if (name != null)
			{
				var field = IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
				if (field != null)
				{
					var attribute = CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute))
						as EnumMemberAttribute;
					if (attribute != null)
					{
						return attribute.Value != null ? attribute.Value : name;
					}
				}

				var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
				return converted == null ? string.Empty : converted;
			}
		}
		else if (value is bool)
		{
			return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
		}
		else if (value is byte[])
		{
			return Convert.ToBase64String((byte[])value);
		}
		else if (value.GetType().IsArray)
		{
			var array = Enumerable.OfType<object>((Array)value);
			return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
		}

		var result = Convert.ToString(value, cultureInfo);
		return result == null ? "" : result;
	}
}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial record HttpValidationProblemDetails : ProblemDetails
{
	[JsonPropertyName("errors")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public IDictionary<string, ICollection<string>>? Errors { get; set; } = default!;
}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial record ProblemDetails
{
	[JsonPropertyName("type")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? Type { get; set; } = default!;

	[JsonPropertyName("title")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? Title { get; set; } = default!;

	[JsonPropertyName("status")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public int? Status { get; set; } = default!;

	[JsonPropertyName("detail")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? Detail { get; set; } = default!;

	[JsonPropertyName("instance")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? Instance { get; set; } = default!;

	private IDictionary<string, object>? _additionalProperties;

	[JsonExtensionData]
	public IDictionary<string, object> AdditionalProperties
	{
		get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
		set { _additionalProperties = value; }
	}
}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial record RegisterRequest
{
	[JsonPropertyName("email")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? Email { get; set; } = default!;

	[JsonPropertyName("password")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? Password { get; set; } = default!;
}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial record AccessTokenResponse
{
	[JsonPropertyName("tokenType")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? TokenType { get; set; } = default!;

	[JsonPropertyName("accessToken")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? AccessToken { get; set; } = default!;

	[JsonPropertyName("expiresIn")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public long? ExpiresIn { get; set; } = default!;

	[JsonPropertyName("refreshToken")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? RefreshToken { get; set; } = default!;
}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial record LoginRequest
{
	[JsonPropertyName("email")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? Email { get; set; } = default!;

	[JsonPropertyName("password")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? Password { get; set; } = default!;

	[JsonPropertyName("twoFactorCode")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? TwoFactorCode { get; set; } = default!;

	[JsonPropertyName("twoFactorRecoveryCode")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? TwoFactorRecoveryCode { get; set; } = default!;
}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial record RefreshRequest
{
	[JsonPropertyName("refreshToken")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? RefreshToken { get; set; } = default!;
}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial record ResendConfirmationEmailRequest
{
	[JsonPropertyName("email")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? Email { get; set; } = default!;
}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial record ForgotPasswordRequest
{
	[JsonPropertyName("email")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? Email { get; set; } = default!;
}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial record ResetPasswordRequest
{
	[JsonPropertyName("email")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? Email { get; set; } = default!;

	[JsonPropertyName("resetCode")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? ResetCode { get; set; } = default!;

	[JsonPropertyName("newPassword")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? NewPassword { get; set; } = default!;
}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial record TwoFactorResponse
{
	[JsonPropertyName("sharedKey")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? SharedKey { get; set; } = default!;

	[JsonPropertyName("recoveryCodesLeft")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public int? RecoveryCodesLeft { get; set; } = default!;

	[JsonPropertyName("recoveryCodes")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public ICollection<string>? RecoveryCodes { get; set; } = default!;

	[JsonPropertyName("isTwoFactorEnabled")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public bool? IsTwoFactorEnabled { get; set; } = default!;

	[JsonPropertyName("isMachineRemembered")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public bool? IsMachineRemembered { get; set; } = default!;
}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial record TwoFactorRequest
{
	[JsonPropertyName("enable")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public bool? Enable { get; set; } = default!;

	[JsonPropertyName("twoFactorCode")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? TwoFactorCode { get; set; } = default!;

	[JsonPropertyName("resetSharedKey")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public bool? ResetSharedKey { get; set; } = default!;

	[JsonPropertyName("resetRecoveryCodes")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public bool? ResetRecoveryCodes { get; set; } = default!;

	[JsonPropertyName("forgetMachine")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public bool? ForgetMachine { get; set; } = default!;
}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial record InfoResponse
{
	[JsonPropertyName("email")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? Email { get; set; } = default!;

	[JsonPropertyName("isEmailConfirmed")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public bool? IsEmailConfirmed { get; set; } = default!;
}

[GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial record InfoRequest
{
	[JsonPropertyName("newEmail")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? NewEmail { get; set; } = default!;

	[JsonPropertyName("newPassword")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? NewPassword { get; set; } = default!;

	[JsonPropertyName("oldPassword")]
	[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
	public string? OldPassword { get; set; } = default!;
}

[GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class ApiException : Exception
{
	public int StatusCode { get; private set; }

	public string? Response { get; private set; }

	public IReadOnlyDictionary<string, IEnumerable<string>> Headers { get; private set; }

	public ApiException(string message, int statusCode, string? response, IReadOnlyDictionary<string, IEnumerable<string>> headers, Exception? innerException)
		: base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
	{
		StatusCode = statusCode;
		Response = response;
		Headers = headers;
	}

	public override string ToString()
	{
		return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
	}
}

[GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class ApiException<TResult> : ApiException
{
	public TResult Result { get; private set; }

	public ApiException(string message, int statusCode, string? response, IReadOnlyDictionary<string, IEnumerable<string>> headers, TResult result, Exception? innerException)
		: base(message, statusCode, response, headers, innerException)
	{
		Result = result;
	}
}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604