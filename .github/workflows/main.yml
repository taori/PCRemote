name: CI

on:

  push:
    branches: [main]
    paths:
      - src/*
      - tests/*
      - .github/workflows/main.yml
      
  pull_request:    
    branches : [main]
    
#    types: 
#      - opened
#      - reopened
#      - synchronize
      
  # manual trigger
  workflow_dispatch:
    inputs:
    
      buildConfiguration:
        type: choice
        options:
          - Release
          - Debug
        required: true
        description: "Configuration for build processes"
        default: 'Release'
        
      productVersion:
        required: true
        description: "Version for Release numbers"
        default: '3.0.0'
        
      createRelease:
        required: true
        type: boolean
        description: "Provide GitHub release?"
        default: false
  
env:
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  WS: ${{ github.workspace }}
  VSVersion: "17.8.1"
  DOTNETVERSION: "7.0"
  BUILDCONFIGURATION : ${{ github.event.inputs.buildConfiguration }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  Environment:
    runs-on: ubuntu-latest
    concurrency:
      group: ci-${{ github.ref }}
      cancel-in-progress: true
      
    outputs:
      buildConfiguration : ${{ steps.setVars.outputs.BUILD_CONFIGURATION }}
      productVersion : ${{ steps.setVars.outputs.PRODUCT_VERSION }}
      releaseVersion : ${{ steps.setVars.outputs.RELEASE_VERSION }}
      apkArtifactsPath : ${{ steps.setVars.outputs.APKTARGETPATH }}
      
    steps:
            
      - name: Github Information
        shell: bash
        run: |
          echo "event: $GITHUB_EVENT_NAME"
          echo "head: $GITHUB_HEAD_REF"
          echo "base: $GITHUB_BASE_REF"

      - name: Environment CI Build
        shell: pwsh
        if: ${{ !( github.event_name == 'workflow_dispatch' && github.event.inputs.productVersion != '1.0.0') }}
        run: |
          $sha = ([string]"${{ github.sha }}").Substring(0,12)
          $date = Get-Date -Format "yyMMdd-HHmmss"
          $version = "beta-$date-$sha"
          echo "RELEASE_VERSION=$version" >> $env:GITHUB_ENV   

      - name: Environment Workflow Dispatch Build
        shell: pwsh
        if: ${{ ( github.event_name == 'workflow_dispatch' && github.event.inputs.productVersion != '1.0.0') }}
        run: |
          $sha = ([string]"${{ github.sha }}").Substring(0,26)
          $version = "release-$env:PV"
          echo "RELEASE_VERSION=$version" >> $env:GITHUB_ENV  
        env:
          PV : ${{ github.event.inputs.productVersion }}
          
      - name: Set environment variables
        id: setVars
        shell: pwsh
        run: |
          Write-Host "Using pwsh version $($Host.Version.ToString())"
          
          $productVersion = "$Env:LPRODUCTVERSION"
          if([string]::IsNullOrEmpty("$productVersion") -eq $true){
            $productVersion = '3.0.0'
          }
          
          $buildConfiguration = "$Env:LBUILDCONFIGURATION"
          if([string]::IsNullOrEmpty("$buildConfiguration") -eq $true){
            $buildConfiguration = 'Release'
          }
          
          Write-Output "PRODUCT_VERSION=$($productVersion)" >> $Env:GITHUB_OUTPUT
          Write-Output "BUILD_CONFIGURATION=$($buildConfiguration)" >> $Env:GITHUB_OUTPUT
          Write-Output "RELEASE_VERSION=$($Env:LRELEASEVERSION)" >> $Env:GITHUB_OUTPUT
          Write-Output "APKTARGETPATH=$($Env:WS)\artifacts\apk\amusoft.pcr.android-$productVersion.apk" >> $Env:GITHUB_OUTPUT
        env:
          LPRODUCTVERSION : ${{ github.event.inputs.productVersion }}
          LRELEASEVERSION : ${{ env.RELEASE_VERSION }}
        
  VerifyEnvironment:
    concurrency:
      group: ci-${{ github.ref }}
      cancel-in-progress: true
    runs-on: windows-latest
    needs: Environment
    steps:
      - name: Tell Environment
        shell: bash
        run: |
          echo "buildConfiguration: $OV1"
          echo "productVersion: $OV2"
          echo "releaseVersion: $OV3"
          echo "event: $GITHUB_EVENT_NAME"
          echo "head: $GITHUB_HEAD_REF"
          echo "base: $GITHUB_BASE_REF"
        env:
          OV1: ${{needs.Environment.outputs.buildConfiguration}}
          OV2: ${{needs.Environment.outputs.productVersion}}
          OV3: ${{needs.Environment.outputs.releaseVersion}}
          
#      - name: Stop
#        run: exit 1
          
  WindowsPublish:
    concurrency:
      group: ci-${{ github.ref }}
      cancel-in-progress: true
    runs-on: windows-latest
    needs: [VerifyEnvironment, Environment]
    steps:
      
      - name: Install .NET MAUI
        shell: pwsh
        run: |
          # dotnet nuget locals all --clear 
          dotnet workload install maui --source https://aka.ms/dotnet6/nuget/index.json --source https://api.nuget.org/v3/index.json
          dotnet workload install android maui wasm-tools --source https://aka.ms/dotnet6/nuget/index.json --source https://api.nuget.org/v3/index.json
          
      - uses: actions/setup-java@v2
        with:
          distribution: 'microsoft'
          java-version: '11'
              
      - uses: actions/checkout@v2      
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1.0.2
        with:
          # Version of Visual Studio to search; defaults to latest if not specified
          vs-version: ${{ env.VSVersion }}

      - shell: pwsh
        name: set user-secrets
        run: |
          dotnet user-secrets set "SignPassword" "$($Env:PASSWORD)" --id "fff9ecb8-0258-4f9f-8333-3da6f78ab9ce"       
        env:
          PASSWORD : ${{ secrets.ANDROID_KEYSTORE_PASS }}

      - shell: pwsh
        name: createMSI.ps1
        id: publishProducts
        run: |
          $releaseVersion = "$($Env:RV)"
          Write-Host "Generating APK + MSI"
          
          $paths = & "$($Env:WS)\deploy\createMSI.ps1" -DeleteArtifacts $true -SkipPublish $false -SkipHarvesting $false -SkipAPK $false -OpenExplorer $false -ProductVersion "$releaseVersion"
          
          Write-Host "APK: $($paths.ApkPath), MSI: $($paths.MsiPath)"
          Write-Output "PRODUCT_APK=$($paths.ApkPath)" >> $Env:GITHUB_OUTPUT
          Write-Output "PRODUCT_MSI=$($paths.MsiPath)" >> $Env:GITHUB_OUTPUT
          
          Get-ChildItem -Path "." -Recurse | %{ $_.Fullname }
        env:
          RV : ${{ needs.Environment.outputs.productVersion }}
          
      - name: Upload MSI
        uses: actions/upload-artifact@v2.2.4
        with:
          name: msi
          path: ${{ steps.publishProducts.outputs.PRODUCT_MSI }}
          if-no-files-found: error
          retention-days: 1
          
      - name: Upload APK
        uses: actions/upload-artifact@v2.2.4
        with:
          name: apk
          path: ${{ steps.publishProducts.outputs.PRODUCT_APK }}        
          if-no-files-found: error
          retention-days: 1 
                    


  Publishing:
    concurrency:
      group: ci-${{ github.ref }}
      cancel-in-progress: true
    runs-on: windows-latest
    needs: [ WindowsPublish ]
    steps:
      - name: Status message
        shell: bash
        run: echo Builds are successful
          
  GitHubRelease:    
    runs-on: windows-latest
    if: ${{ github.event.inputs.createRelease == '1' }}
    needs: [ Publishing, VerifyEnvironment]
    steps:
                                
      - name: Download artifact apk
        uses: actions/download-artifact@v2.0.10
        with:
          name: apk  
          path: artifacts/apk/
          
      - name: Download artifact server
        uses: actions/download-artifact@v2.0.10
        with:
          name: windows-installer
          path: artifacts/msi/

      - name: Check release asset existance
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "artifacts/apk/amusoft.pcr.mobile.droid.apk, artifacts/msi/Amusoft PC Remote 3.msi"
                             
      - name: Create GitHub release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: ${{ startsWith( env.RN, 'beta-') }}
          release_name: "${{ env.RN }}"
          tag_name: "${{ env.RN }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}          
          RN : ${{needs.Environment.outputs.releaseVersion}}
          
      #- name: Display structure of downloaded files
      #  shell: bash
      #  run: ls -R $GITHUB_WORKSPACE/downloads/
          
      - id: upload-release-asset-apk
        name: Upload APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: artifacts/apk/amusoft.pcr.mobile.droid.apk
          asset_name: amusoft.pcr.mobile.droid.apk
          asset_content_type: application/vnd.android.package-archive
                    
      - id: upload-release-asset-msi
        name: Upload MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RN: ${{ needs.Environment.outputs.releaseVersion }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: artifacts/msi/Amusoft PC Remote 3.msi
          asset_name: Amusoft PC Remote 3 ${{ env.RN }}.msi
          asset_content_type: application/octet-stream
