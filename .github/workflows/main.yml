name: CI

on:

  push:
    branches:
      - master 
    paths:
      - src/*
      - tests/*
      - .github/workflows/main.yml
      
  pull_request:    
    types: 
      - opened
      - reopened
      - synchronize
      
  # manual trigger
  workflow_dispatch:
    inputs:
    
      buildConfiguration:
        required: true
        description: "Configuration for build processes"
        default: 'Release'
        
      productVersion:
        required: true
        description: "Version for Release numbers"
        default: '3.0.0'
        
      createRelease:
        required: true
        type: boolean
        description: "Provide GitHub release?"
        default: false
  
env:
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  WS: ${{ github.workspace }}
  VSVersion: "17.8.1"
  DOTNETVERSION: "7.0"
  BUILDCONFIGURATION : ${{ github.event.inputs.buildConfiguration }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  Environment:
    runs-on: ubuntu-latest
    concurrency:
      group: ci-${{ github.ref }}
      cancel-in-progress: true
      
    outputs:
      buildConfiguration : ${{ steps.setVars.outputs.BUILD_CONFIGURATION }}
      productVersion : ${{ steps.setVars.outputs.PRODUCT_VERSION }}
      releaseVersion : ${{ steps.setVars.outputs.RELEASE_VERSION }}
      apkArtifactsPath : ${{ steps.setVars.outputs.APKTARGETPATH }}
      
    steps:
            
      - name: Github Information
        shell: bash
        run: |
          echo "event: $GITHUB_EVENT_NAME"
          echo "head: $GITHUB_HEAD_REF"
          echo "base: $GITHUB_BASE_REF"

      - name: Environment CI Build
        shell: pwsh
        if: ${{ !( github.event_name == 'workflow_dispatch' && github.event.inputs.productVersion != '1.0.0') }}
        run: |
          $sha = ([string]"${{ github.sha }}").Substring(0,12)
          $date = Get-Date -Format "yyMMdd-HHmmss"
          $version = "beta-$date-$sha"
          echo "RELEASE_VERSION=$version" >> $env:GITHUB_ENV   

      - name: Environment Workflow Dispatch Build
        shell: pwsh
        if: ${{ ( github.event_name == 'workflow_dispatch' && github.event.inputs.productVersion != '1.0.0') }}
        run: |
          $sha = ([string]"${{ github.sha }}").Substring(0,26)
          $version = "release-$env:PV"
          echo "RELEASE_VERSION=$version" >> $env:GITHUB_ENV  
        env:
          PV : ${{ github.event.inputs.productVersion }}
          
      - name: Set environment variables
        id: setVars
        shell: pwsh
        run: |
          Write-Host "Using pwsh version $($Host.Version.ToString())"
          
          $productVersion = "$Env:LPRODUCTVERSION"
          if([string]::IsNullOrEmpty("$productVersion") -eq $true){
            $productVersion = '3.0.0'
          }
          
          $buildConfiguration = "$Env:LBUILDCONFIGURATION"
          if([string]::IsNullOrEmpty("$buildConfiguration") -eq $true){
            $buildConfiguration = 'Release'
          }
          
          Write-Output "PRODUCT_VERSION=$($productVersion)" >> $Env:GITHUB_OUTPUT
          Write-Output "BUILD_CONFIGURATION=$($buildConfiguration)" >> $Env:GITHUB_OUTPUT
          Write-Output "RELEASE_VERSION=$($Env:LRELEASEVERSION)" >> $Env:GITHUB_OUTPUT
          Write-Output "APKTARGETPATH=$($Env:WS)\artifacts\apk\amusoft.pcr-$($Env:RV).apk" >> $Env:GITHUB_OUTPUT
        env:
          LPRODUCTVERSION : ${{ github.event.inputs.productVersion }}
          LRELEASEVERSION : ${{ env.RELEASE_VERSION }}
        
#          echo "event: $GITHUB_EVENT_NAME"
#          echo "head: $GITHUB_HEAD_REF"
#          echo "base: $GITHUB_BASE_REF"
        
#      - name: Stop
#        run: exit 1
        
  VerifyEnvironment:
    concurrency:
      group: ci-${{ github.ref }}
      cancel-in-progress: true
    runs-on: windows-latest
    needs: Environment
    steps:
      - name: Tell Environment
        shell: bash
        run: |
          echo "buildConfiguration: $OV1"
          echo "productVersion: $OV2"
          echo "releaseVersion: $OV3"
          echo "event: $GITHUB_EVENT_NAME"
          echo "head: $GITHUB_HEAD_REF"
          echo "base: $GITHUB_BASE_REF"
        env:
          OV1: ${{needs.Environment.outputs.buildConfiguration}}
          OV2: ${{needs.Environment.outputs.productVersion}}
          OV3: ${{needs.Environment.outputs.releaseVersion}}
          
#      - name: Stop
#        run: exit 1
          
  Android:
    concurrency:
      group: ci-${{ github.ref }}
      cancel-in-progress: true
    runs-on: windows-latest
    needs: [VerifyEnvironment, Environment]
    steps:

      - name: Setup .NET ${{ env.DOTNETVERSION }}
        uses: actions/setup-dotnet@v3.2.0
        with:
          # Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x, 3.x, 6.0.2xx
          dotnet-version: ${{ env.DOTNETVERSION }}
          # Optional quality of the build. The possible values are: daily, signed, validated, preview, ga.
          dotnet-quality: ga
          # Optional global.json location, if your global.json isn't located in the root of the repo.
          global-json-file: ${{ env.WS }}\src\global.json
          
      - uses: actions/checkout@v2      
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1.0.2
        with:
          # Version of Visual Studio to search; defaults to latest if not specified
          vs-version: ${{ env.VSVersion }}
             
      - shell: pwsh
        if: false
        name: Update android manifest
        run: |
          $manifestPath = "src/Amusoft.PCR.Mobile.Droid/Properties/AndroidManifest.xml"
          $oldVersion = "1.0"
          $newVersion = "$env:PRODUCTVERSION"
          Write-Host "Updating $oldVersion to $newVersion"
          $replacedContent = [System.IO.File]::ReadAllText($manifestPath).Replace("android:versionName=`"$oldVersion`"", "android:versionName=`"$newVersion`"")
          [System.IO.File]::WriteAllText($manifestPath, $replacedContent)          
        env:      
          PRODUCTVERSION : ${{needs.Environment.outputs.productVersion}}

      - shell: pwsh
        name: set user-secrets
        run: |
          dotnet user-secrets set "SignPassword" "$($Env:PASSWORD)" --id "fff9ecb8-0258-4f9f-8333-3da6f78ab9ce"       
        env:
          PASSWORD : ${{ secrets.ANDROID_KEYSTORE_PASS }}

      - shell: pwsh
        name: publishapk.ps1
        run: |
          $apkPath = "$($Env:WS)\artifacts\apk\amusoft.pcr-$($Env:RV).apk"
          Write-Host "Writing APK to $apkPath"
          & "$($Env:WS)\deploy\publishapk.ps1" -SignPassword "$($Env:PASSWORD)" -PublishFilePath "$apkPath"          
        env:
          RV : ${{ needs.Environment.outputs.productVersion }}
          PASSWORD : ${{ secrets.ANDROID_KEYSTORE_PASS }}
                    
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: apk
          path: ${{ needs.Environment.outputs.apkArtifactsPath }}        
          if-no-files-found: error
          retention-days: 1 
                    
  Windows:
    concurrency:
      group: ci-${{ github.ref }}
      cancel-in-progress: true
    needs: [VerifyEnvironment, Environment]
    runs-on: windows-latest
    if: false
    steps:
            
      - uses: actions/checkout@v2      
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1.0.2
        with:
          # Version of Visual Studio to search; defaults to latest if not specified
          vs-version: ${{ env.VSVersion }}
          
      - shell: pwsh
        name: Build server
        run: |
          dotnet publish src/Amusoft.PCR.Server/Amusoft.PCR.Server.csproj -c $env:BUILDCONFIGURATION -o artifacts/server/web /property:Version=$env:PRODUCT_VERSION --sc -r win-x64
          dotnet publish src/Amusoft.PCR.Integration.WindowsDesktop/Amusoft.PCR.Integration.WindowsDesktop.csproj -c $env:BUILDCONFIGURATION -o artifacts/server/win-integration /property:Version=$env:PRODUCT_VERSION --sc -r win-x64
        env:
          BUILDCONFIGURATION : ${{needs.Environment.outputs.buildConfiguration}}
          PRODUCT_VERSION : ${{needs.Environment.outputs.productVersion}}
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: server
          path: "artifacts/server/"          
          if-no-files-found: error
          retention-days: 1    

  BuildCompletes:
    concurrency:
      group: ci-${{ github.ref }}
      cancel-in-progress: true
    runs-on: windows-latest
    needs: [Windows, Android]
    steps:
      - name: Status message
        shell: bash
        run: echo Builds are successful
    
  InstallerWindows:
    concurrency:
      group: ci-${{ github.ref }}
      cancel-in-progress: true  
    runs-on: windows-latest
    needs: [BuildCompletes, Environment]
    steps:     
    
      - uses: actions/checkout@v2      
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1.0.2
        with:
          # Version of Visual Studio to search; defaults to latest if not specified
          vs-version: ${{ env.VSVersion }}
          
      - name: Download APK Artifact
        uses: actions/download-artifact@v2.0.10
        with:
          name: apk
          path: artifacts/apk/
          
      - name: Download Server Artifact
        uses: actions/download-artifact@v2.0.10
        with:
          name: server
          path: artifacts/msi/
                    
     #- name: Display folder structure
     #  shell: bash
     #  run: ls -R artifacts/
          
      - shell: bash
        name: Move APK to Server content directory
        run: |
          mkdir -p artifacts/msi/web/wwwroot/downloads/
          cp artifacts/apk/amusoft.pcr.mobile.droid.apk artifacts/msi/web/wwwroot/downloads/amusoft.pcr.mobile.droid.apk                      
          
      - shell: pwsh
        name: Compile MSI using WiX Installer
        run: |
          $newProductContent = (Get-Content -path deploy\Amusoft.PCR.Installer\Product.wxs -Raw) -replace 'ProductVersion = "1.0.1"',"ProductVersion = `"$env:PRODUCT_VERSION`"" | Set-Content -Path deploy\Amusoft.PCR.Installer\Product.wxs        
          msbuild /verbosity:normal /t:"Build" /bl /p:Configuration=$env:BUILDCONFIGURATION src/WixBuild.sln /p:AssemblyVersion=${{ github.event.inputs.productVersion }} /p:XRunHeat=true
        env:          
          PRODUCT_VERSION : ${{needs.Environment.outputs.productVersion}}
          BUILDCONFIGURATION : ${{needs.Environment.outputs.buildConfiguration}}
      
      - name: Upload MSI
        uses: actions/upload-artifact@v2.2.4
        with:
          name: windows-installer
          path: "artifacts/msi-compiled/${{ env.BUILDCONFIGURATION }}/*.msi"          
          if-no-files-found: error
          retention-days: 1    
        env:        
          BUILDCONFIGURATION : ${{needs.Environment.outputs.buildConfiguration}}
          
  GitHubRelease:    
    runs-on: windows-latest
    if: ${{ github.event.inputs.createRelease == '1' }}
    needs: [InstallerWindows, Environment]
    steps:
                                
      - name: Download artifact apk
        uses: actions/download-artifact@v2.0.10
        with:
          name: apk  
          path: artifacts/apk/
          
      - name: Download artifact server
        uses: actions/download-artifact@v2.0.10
        with:
          name: windows-installer
          path: artifacts/msi/

      - name: Check release asset existance
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "artifacts/apk/amusoft.pcr.mobile.droid.apk, artifacts/msi/Amusoft PC Remote 3.msi"
                             
      - name: Create GitHub release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: ${{ startsWith( env.RN, 'beta-') }}
          release_name: "${{ env.RN }}"
          tag_name: "${{ env.RN }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}          
          RN : ${{needs.Environment.outputs.releaseVersion}}
          
      #- name: Display structure of downloaded files
      #  shell: bash
      #  run: ls -R $GITHUB_WORKSPACE/downloads/
          
      - id: upload-release-asset-apk
        name: Upload APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: artifacts/apk/amusoft.pcr.mobile.droid.apk
          asset_name: amusoft.pcr.mobile.droid.apk
          asset_content_type: application/vnd.android.package-archive
                    
      - id: upload-release-asset-msi
        name: Upload MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RN: ${{ needs.Environment.outputs.releaseVersion }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: artifacts/msi/Amusoft PC Remote 3.msi
          asset_name: Amusoft PC Remote 3 ${{ env.RN }}.msi
          asset_content_type: application/octet-stream
